#!/usr/bin/env php
<?php

// Ensure CLI usage
if (PHP_SAPI !== 'cli') {
    exit('This script can only be run from the command line.');
}

// Check command-line arguments
if ($argc < 2) {
    help(); // Display help if no command is provided
} else {
    $command = $argv[1];

    $currentDir = getcwd();

    switch ($command) {
        case "help":
            help();
            break;
        case "version":
            version();
            break;
        case "run":
            run();
            break;
        case "create-app":
            createApp($currentDir);
            break;
        default:
            help();
    }
}


// Run function
function run() {
    echo "Running your project at localhost:2323\n";
    exec("php -S localhost:2323 -t .");
}

// uses function
function help() {
    cli_logo();
    echo "\033[33musage:\033[32m php fuel\033[0m <--command-->\n\n";
    echo "\033[33mcommands:\033[0m\n";
    echo "\t\033[32mrun:\033[0m\t\trun your project at localhost (default port:2323)\n";
    echo "\t\033[32mhelp:\033[0m\t\thelp\n";
    echo "\t\033[32mversion:\033[0m\tversion\n";
    exit(1);
}

// version function
function version() {
    cli_logo();
    exit(1);
}

// create project
function createApp($currentDir) {
    cli_logo();
    try {
        writeAuth($currentDir);
    } catch (e) {}
    try {
        writeConnection($currentDir);
    } catch (e) {}
    try {
        writePublicIndex($currentDir);
    } catch (e) {}
}

                                                                                
function cli_logo() {
    echo " \t\t\t\t\t    \033[1m\033[44m </> \033[0m\033[37m\033[1m";
    echo "\033[36m
╔───────────────────────────────────────────────╗ 
│    ___   ___  __ ______   _____   ___   _  __ │ 
│   / _ | / _ )/ // /  _/_ / / _ | / _ | / |/ / │ 
│  / __ |/ _  / _  // // // / __ |/ __ |/    /  │ 
│ /_/ |_/____/_//_/___/\___/_/ |_/_/ |_/_/|_/   │ 
╚───────────────────────────────────────────────╝ \n";
    echo "\033[0m\033[31m\033[6mABHIJAAN\033[0m Framework version \033[32m0.1.0\033[0m 2024\n\n";
}
                           





// file
// writeAuth();
// writeConnection();
// write404();
// writeRoute();
// writeSecure();
// writeSession();
// writeCore();
// writeConfig();
// writePublicIndex();
// writeRoutes();
// writeViewsIndex();
// writeIndex();

//media
// copyLogoImage(); 


// auth file
function writeAuth($currentDir) {
// file creation
mkdir($currentDir.'/'.'.core/inbuilts/auth', 0777, true);
$filename = $currentDir.'/'.'.core/inbuilts/auth/auth.php';
// file content
file_put_contents($filename, 
<<<CODE
<?php
    function set_auth(\$id = null, \$username = null) {
        if (\$id && \$username) {
            \$_SESSION['id'] = \$id;
            \$_SESSION['name'] = \$username;
        }
    }
    // get logged in info
    function get_user() {
        if (isset(\$_SESSION['id']) && isset(\$_SESSION['name'])) {
            return array(\$_SESSION['id'], \$_SESSION['name']);
        }
    }
    // get logged in user name
    function user_name() {
        if (isset(\$_SESSION['name'])) {
            return \$_SESSION['name'];
        }
    }
    // get logged in user id
    function user_id() {
        if (isset(\$_SESSION['id'])) {
            return \$_SESSION['id'];
        }
    }
    // check if logged in
    function check_auth() {
        if (isset(\$_SESSION['id']) && isset(\$_SESSION['name'])) {
            return true;
        }
        return false;
    }
    // destroy session
    function destroy_user() {
        session_unset();
        session_destroy();
    }
CODE
);
chmod($filename, 0444);
}


// connection file
function writeConnection($currentDir) {
// file creation
mkdir($currentDir.'/'.'.core/inbuilts/connection', 0777, true);
$filename = $currentDir.'/'.'.core/inbuilts/connection/connection.php';
// file content
file_put_contents($filename, 
<<<CODE
<?php

    \$pdo;
    switch (DB) {
        case "pgsql":
            postgres(DB_HOST, DB_NAME, DB_USER, DB_PASS);
            break;
    }
    function postgres(\$host, \$dbname, \$user, \$password) {
        global \$pdo;
        try {
            \$dsn = "pgsql:host=\$host;port=5432;dbname=\$dbname;";
            // make a database connection
            \$pdo = new PDO(\$dsn, \$user, \$password, [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]);
            if (\$pdo) {
                echo "Connected to the \$dbname database successfully!";
            }
        } catch (PDOException \$e) {
            die(\$e->getMessage());
        }
    }
CODE
);
chmod($filename, 0444);
}

// route file
function writeRoute($currentDir) {
// file creation
mkdir($currentDir.'/'.'.core/inbuilts/routing', 0777, true);
$filename = $currentDir.'/'.'.core/inbuilts/routing/route.php';
// file content
file_put_contents($filename, 
<<<CODE
<?php
    \$route = [
    	'/' => ROOT.'/views/index.php',
    ];
    function route(\$uri = null, \$path= null) {
	global \$route;
	\$uri = secure_data(\$uri);
	\$path = secure_data(\$path);

	if (\$path && \$uri) {
		if (isset(\$route[\$uri])) {
			error_log("Path already assigned");
		}
		// asign
		\$route[\$uri] = ROOT.'/views/'.\$path;
	}
	return \$route;
}
CODE );
chmod($filename, 0444);
}

// secure file
function writeSecure($currentDir) {
// file creation
mkdir($currentDir.'/'.'.core/inbuilts/secure', 0777, true);
$filename = $currentDir.'/'.'.core/inbuilts/secure/secure.php';
// file content
file_put_contents($filename, 
<<<CODE
<?php
    // secure data by filtering
    function secure_data (\$data) {
        \$data = trim(\$data);
        \$data = stripslashes(\$data);
        \$data = htmlspecialchars(\$data);
        return \$data;
    }
    // Function to encrypt data
    function encryptData(\$data, \$key) {
        \$iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length('aes-256-cbc'));
        \$encrypted = openssl_encrypt(\$data, 'aes-256-cbc', \$key, 0, \$iv);
        return base64_encode(\$encrypted . '::' . \$iv);
    }
    // Function to decrypt data
    function decryptData(\$data, \$key) {
        \$parts = explode('::', base64_decode(\$data));
        \$encrypted = \$parts[0];
        \$iv = \$parts[1];
        return openssl_decrypt(\$encrypted, 'aes-256-cbc', \$key, 0, \$iv);
    }
CODE );
chmod($filename, 0444);
}

// secure file
function writeCore($currentDir) {
// file creation
mkdir($currentDir.'/'.'.core', 0777, true);
$filename = $currentDir.'/'.'.core/core.php';
// file content
file_put_contents($filename, 
<<<CODE
<?php
    // namespace Core; \n
    // secure
    require_once 'inbuilts/secure/secure.php'; \n
    // route
    require_once 'inbuilts/routing/route.php'; \n
    // connection
    require_once 'inbuilts/connection/connection.php'; \n
    // asset()
    function asset(\$path) {
        return "/public/".\$path;
    }
CODE );
chmod($filename, 0444);
}

// config
function writeConfig($currentDir) {
// file creation
mkdir($currentDir.'/'.'config', 0777, true);
$filename = $currentDir.'/'.'config/config.php';
// file content
file_put_contents($filename, 
<<<CODE
<?php
    // ./config/config.php

    // Project Name
    define('PROJECT_NAME','gemiPHP');

    // Database configuration
    define('DB_HOST', "localhost");
    define('DB_USER', "postgres");
    define('DB_PASS', "postgres");
    define('DB_NAME', "abhijaan");

    // for postgreSQL database, uncomment the below line
    define('DB', 'pgsql');

    // localhost server port
    define('PORT', "2323");
CODE );
chmod($filename, 0444);
}

function writePublicIndex($currentDir) {
// file creation
mkdir($currentDir.'/'.'public', 0777, true);
$filename = $currentDir.'/'.'public/index.php';
// file content
file_put_contents($filename, 
<<<CODE
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>অভিযান</title>
    <link rel="icon" href="<?= asset('favicon.ico') ?>">
    <link rel="stylesheet" href="<?= asset('style.css') ?>">
    <!-- Other meta tags, stylesheets, or scripts -->
</head>
<body>
CODE );
chmod($filename, 0444);
}





function copyLogoImage($currentDir) {
    $url = 'https://github.com/MRgrav/public_files/blob/master/abhijaan_full_png_compresses_25.png';
    $targetDir = $currentDir.'/'.'public';

    downloadFile($url, $targetDir);
}



// Function to download and save the file
function downloadFile($sourceURL, $targetDir) {
    // Get filename from the URL
    $filename = basename($sourceURL);
    // Validate filename (optional)
    if (!preg_match("/^[a-zA-Z0-9._-]+\.[a-zA-Z]+$/", $filename)) {
      die("Invalid filename: $filename");
    }
    // Check if target directory exists
    if (!is_dir($targetDir)) {
      mkdir($targetDir, 0755, true);  // Create directory if it doesn't exist with permissions
    }
    // Create the full target path
    $targetPath = "$targetDir/$filename";
    // Initialize cURL
    $ch = curl_init();
    // Set cURL options
    curl_setopt($ch, CURLOPT_URL, $sourceURL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  // Return the downloaded content
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);  // Follow redirects
    // Download the file
    $content = curl_exec($ch);
    $error = curl_error($ch);
    curl_close($ch);
    // Check for download errors
    if ($error) {
      die("Error downloading file: $error");
    }
    // Save the downloaded content to the file
    if (file_put_contents($targetPath, $content) === false) {
      die("Error saving file: $targetPath");
    }
}